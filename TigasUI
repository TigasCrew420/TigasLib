local TigasLib = {}
TigasLib.__index = TigasLib

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()

local Theme = {
    Primary = Color3.fromRGB(0, 247, 255),
    Secondary = Color3.fromRGB(148, 0, 255),
    Accent = Color3.fromRGB(255, 0, 140),
    Background = Color3.fromRGB(10, 10, 20),
    Card = Color3.fromRGB(20, 20, 35),
    Surface = Color3.fromRGB(30, 30, 50),
    Text = Color3.fromRGB(255, 255, 255),
    SubText = Color3.fromRGB(180, 180, 220),
    Success = Color3.fromRGB(0, 255, 162),
    Warning = Color3.fromRGB(255, 230, 0),
    Error = Color3.fromRGB(255, 50, 100),
    Dark = Color3.fromRGB(5, 5, 15)
}

local function Create(class, properties)
    local instance = Instance.new(class)
    for property, value in pairs(properties) do
        instance[property] = value
    end
    return instance
end

local function Tween(object, properties, duration, style)
    local tweenInfo = TweenInfo.new(duration or 0.3, style or Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
    local tween = TweenService:Create(object, tweenInfo, properties)
    tween:Play()
    return tween
end

local function ApplyGlassEffect(frame, intensity)
    local Stroke = Create("UIStroke", {
        Parent = frame,
        Color = Color3.fromRGB(255, 255, 255),
        Transparency = intensity or 0.9,
        Thickness = 1.5,
        ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    })
    
    local Gradient = Create("UIGradient", {
        Parent = Stroke,
        Rotation = 45,
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Theme.Primary),
            ColorSequenceKeypoint.new(0.5, Theme.Accent),
            ColorSequenceKeypoint.new(1, Theme.Secondary)
        })
    })
    
    return Stroke, Gradient
end

local function CreatePulseEffect(frame)
    local PulseGlow = Create("UIStroke", {
        Parent = frame,
        Color = Theme.Primary,
        Thickness = 2,
        Transparency = 0.8
    })
    
    local PulseGradient = Create("UIGradient", {
        Parent = PulseGlow,
        Rotation = 90,
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Theme.Primary),
            ColorSequenceKeypoint.new(1, Theme.Secondary)
        })
    })
    
    coroutine.wrap(function()
        while frame.Parent do
            Tween(PulseGlow, {Thickness = 3, Transparency = 0.6}, 1, Enum.EasingStyle.Sine)
            wait(1)
            Tween(PulseGlow, {Thickness = 2, Transparency = 0.8}, 1, Enum.EasingStyle.Sine)
            wait(1)
        end
    end)()
    
    return PulseGlow
end

function TigasLib:CreateWindow(options)
    options = options or {}
    local window = {
        Name = options.Name or "TigasLib",
        Theme = options.Theme or Theme,
        Size = options.Size or UDim2.new(0, 600, 0, 500),
        Position = options.Position or UDim2.new(0.5, -300, 0.5, -250),
        Transparency = options.Transparency or 0.05,
        AcrylicBlur = options.AcrylicBlur or true
    }
    
    local ScreenGui = Create("ScreenGui", {
        Name = "TigasLib",
        DisplayOrder = 10,
        ResetOnSpawn = false,
        Parent = Player:WaitForChild("PlayerGui")
    })
    
    if window.AcrylicBlur then
        local Blur = Create("BlurEffect", {
            Name = "BackgroundBlur",
            Size = 10,
            Parent = ScreenGui
        })
    end
    
    local MainContainer = Create("Frame", {
        Name = "MainContainer",
        Size = window.Size,
        Position = window.Position,
        BackgroundColor3 = window.Theme.Background,
        BackgroundTransparency = window.Transparency,
        BorderSizePixel = 0,
        ClipsDescendants = true,
        Parent = ScreenGui
    })
    
    ApplyGlassEffect(MainContainer, 0.8)
    CreatePulseEffect(MainContainer)
    
    local UICorner = Create("UICorner", {
        CornerRadius = UDim.new(0, 16),
        Parent = MainContainer
    })
    
    local BackgroundPattern = Create("Frame", {
        Name = "BackgroundPattern",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Parent = MainContainer
    })
    
    local AnimatedGradient = Create("UIGradient", {
        Parent = BackgroundPattern,
        Rotation = 0,
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(10, 10, 30)),
            ColorSequenceKeypoint.new(0.5, Color3.fromRGB(15, 15, 40)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 10, 30))
        }),
        Transparency = NumberSequence.new({
            NumberSequenceKeypoint.new(0, 0.8),
            NumberSequenceKeypoint.new(1, 0.9)
        })
    })
    
    coroutine.wrap(function()
        while BackgroundPattern.Parent do
            for i = 0, 360, 2 do
                AnimatedGradient.Rotation = i
                RunService.RenderStepped:Wait()
            end
        end
    end)()
    
    local TopBar = Create("Frame", {
        Name = "TopBar",
        Size = UDim2.new(1, 0, 0, 50),
        BackgroundColor3 = window.Theme.Surface,
        BackgroundTransparency = 0.4,
        BorderSizePixel = 0,
        Parent = MainContainer
    })
    
    local TopBarCorner = Create("UICorner", {
        CornerRadius = UDim.new(0, 16),
        Parent = TopBar
    })
    
    ApplyGlassEffect(TopBar, 0.7)
    
    local TopBarGradient = Create("UIGradient", {
        Parent = TopBar,
        Rotation = 90,
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Theme.Primary),
            ColorSequenceKeypoint.new(0.3, Theme.Accent),
            ColorSequenceKeypoint.new(0.7, Theme.Secondary),
            ColorSequenceKeypoint.new(1, Theme.Primary)
        }),
        Transparency = NumberSequence.new({
            NumberSequenceKeypoint.new(0, 0.7),
            NumberSequenceKeypoint.new(1, 0.9)
        })
    })
    
    local TitleContainer = Create("Frame", {
        Name = "TitleContainer",
        Size = UDim2.new(0.7, 0, 1, 0),
        Position = UDim2.new(0, 15, 0, 0),
        BackgroundTransparency = 1,
        Parent = TopBar
    })
    
    local Title = Create("TextLabel", {
        Name = "Title",
        Size = UDim2.new(1, 0, 0.6, 0),
        Position = UDim2.new(0, 0, 0.2, 0),
        BackgroundTransparency = 1,
        Text = window.Name,
        TextColor3 = window.Theme.Text,
        TextSize = 20,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = TitleContainer
    })
    
    local Subtitle = Create("TextLabel", {
        Name = "Subtitle",
        Size = UDim2.new(1, 0, 0.4, 0),
        Position = UDim2.new(0, 0, 0.6, 0),
        BackgroundTransparency = 1,
        Text = "Futuristic UI Library",
        TextColor3 = window.Theme.SubText,
        TextSize = 12,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = TitleContainer
    })
    
    local ControlContainer = Create("Frame", {
        Name = "ControlContainer",
        Size = UDim2.new(0.2, 0, 1, 0),
        Position = UDim2.new(0.8, 0, 0, 0),
        BackgroundTransparency = 1,
        Parent = TopBar
    })
    
    local MinimizeButton = Create("TextButton", {
        Name = "MinimizeButton",
        Size = UDim2.new(0, 30, 0, 30),
        Position = UDim2.new(0.2, 0, 0.5, -15),
        BackgroundColor3 = Theme.Warning,
        BackgroundTransparency = 0.3,
        Text = "_",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        Parent = ControlContainer
    })
    
    local CloseButton = Create("TextButton", {
        Name = "CloseButton",
        Size = UDim2.new(0, 30, 0, 30),
        Position = UDim2.new(0.6, 0, 0.5, -15),
        BackgroundColor3 = Theme.Error,
        BackgroundTransparency = 0.3,
        Text = "Ã—",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 20,
        Font = Enum.Font.GothamBold,
        Parent = ControlContainer
    })
    
    Create("UICorner", {CornerRadius = UDim.new(1, 0), Parent = MinimizeButton})
    Create("UICorner", {CornerRadius = UDim.new(1, 0), Parent = CloseButton})
    ApplyGlassEffect(MinimizeButton)
    ApplyGlassEffect(CloseButton)
    
    local Content = Create("ScrollingFrame", {
        Name = "Content",
        Size = UDim2.new(1, -20, 1, -70),
        Position = UDim2.new(0, 10, 0, 60),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = Theme.Primary,
        ScrollBarImageTransparency = 0.7,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        Parent = MainContainer
    })
    
    local UIListLayout = Create("UIListLayout", {
        Parent = Content,
        Padding = UDim.new(0, 15)
    })
    
    local dragging = false
    local dragInput, dragStart, startPos
    
    TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = MainContainer.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    TopBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            MainContainer.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    CloseButton.MouseButton1Click:Connect(function()
        Tween(MainContainer, {Size = UDim2.new(0, 0, 0, 0), Position = UDim2.new(0.5, 0, 0.5, 0)}, 0.3)
        wait(0.3)
        ScreenGui:Destroy()
    end)
    
    local minimized = false
    MinimizeButton.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            Tween(MainContainer, {Size = UDim2.new(0, 600, 0, 50)}, 0.3)
            Tween(Content, {Visible = false}, 0.3)
        else
            Tween(MainContainer, {Size = window.Size}, 0.3)
            Tween(Content, {Visible = true}, 0.3)
        end
    end)
    
    local function SetupButtonHover(button, hoverColor)
        button.MouseEnter:Connect(function()
            Tween(button, {BackgroundTransparency = 0.1, Size = UDim2.new(0, 32, 0, 32)}, 0.2)
        end)
        
        button.MouseLeave:Connect(function()
            Tween(button, {BackgroundTransparency = 0.3, Size = UDim2.new(0, 30, 0, 30)}, 0.2)
        end)
    end
    
    SetupButtonHover(MinimizeButton, Theme.Warning)
    SetupButtonHover(CloseButton, Theme.Error)
    
    UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        Content.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y + 20)
    end)
    
    local windowTable = {
        ScreenGui = ScreenGui,
        MainContainer = MainContainer,
        Content = Content,
        Theme = window.Theme
    }
    
    setmetatable(windowTable, TigasLib)
    return windowTable
end

function TigasLib:CreateSection(options)
    local section = {
        Name = options.Name or "Section",
        Parent = options.Parent or self.Content
    }
    
    local SectionFrame = Create("Frame", {
        Name = "SectionFrame",
        Size = UDim2.new(1, 0, 0, 50),
        BackgroundColor3 = self.Theme.Card,
        BackgroundTransparency = 0.15,
        BorderSizePixel = 0,
        Parent = section.Parent
    })
    
    Create("UICorner", {CornerRadius = UDim.new(0, 12), Parent = SectionFrame})
    ApplyGlassEffect(SectionFrame, 0.6)
    
    local SectionHeader = Create("Frame", {
        Name = "SectionHeader",
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundTransparency = 1,
        Parent = SectionFrame
    })
    
    local SectionIcon = Create("TextLabel", {
        Name = "SectionIcon",
        Size = UDim2.new(0, 30, 0, 30),
        Position = UDim2.new(0, 10, 0.5, -15),
        BackgroundTransparency = 1,
        Text = "â—ˆ",
        TextColor3 = self.Theme.Primary,
        TextSize = 18,
        Font = Enum.Font.GothamBold,
        Parent = SectionHeader
    })
    
    local SectionTitle = Create("TextLabel", {
        Name = "SectionTitle",
        Size = UDim2.new(1, -50, 1, 0),
        Position = UDim2.new(0, 50, 0, 0),
        BackgroundTransparency = 1,
        Text = section.Name,
        TextColor3 = self.Theme.Text,
        TextSize = 16,
        Font = Enum.Font.GothamSemibold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = SectionHeader
    })
    
    local SectionContent = Create("Frame", {
        Name = "SectionContent",
        Size = UDim2.new(1, -20, 0, 0),
        Position = UDim2.new(0, 10, 0, 45),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Parent = SectionFrame
    })
    
    local SectionListLayout = Create("UIListLayout", {
        Parent = SectionContent,
        Padding = UDim.new(0, 10)
    })
    
    SectionListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        SectionContent.Size = UDim2.new(1, -20, 0, SectionListLayout.AbsoluteContentSize.Y)
        SectionFrame.Size = UDim2.new(1, 0, 0, SectionListLayout.AbsoluteContentSize.Y + 55)
    end)
    
    SectionHeader.MouseEnter:Connect(function()
        Tween(SectionIcon, {TextColor3 = self.Theme.Accent, Rotation = 180}, 0.3)
    end)
    
    SectionHeader.MouseLeave:Connect(function()
        Tween(SectionIcon, {TextColor3 = self.Theme.Primary, Rotation = 0}, 0.3)
    end)
    
    return {
        Frame = SectionFrame,
        Content = SectionContent
    }
end

function TigasLib:CreateSlider(options)
    local slider = {
        Name = options.Name or "Slider",
        Min = options.Min or 0,
        Max = options.Max or 100,
        Default = options.Default or options.Min or 0,
        Precision = options.Precision or 0,
        Callback = options.Callback or function() end,
        Parent = options.Parent or self.Content
    }
    
    local SliderFrame = Create("Frame", {
        Name = "SliderFrame",
        Size = UDim2.new(1, 0, 0, 70),
        BackgroundColor3 = self.Theme.Card,
        BackgroundTransparency = 0.2,
        BorderSizePixel = 0,
        Parent = slider.Parent
    })
    
    Create("UICorner", {CornerRadius = UDim.new(0, 10), Parent = SliderFrame})
    ApplyGlassEffect(SliderFrame, 0.7)
    
    local SliderHeader = Create("Frame", {
        Name = "SliderHeader",
        Size = UDim2.new(1, 0, 0, 25),
        BackgroundTransparency = 1,
        Parent = SliderFrame
    })
    
    local SliderTitle = Create("TextLabel", {
        Name = "SliderTitle",
        Size = UDim2.new(0.7, 0, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = slider.Name,
        TextColor3 = self.Theme.Text,
        TextSize = 14,
        Font = Enum.Font.GothamSemibold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = SliderHeader
    })
    
    local ValueLabel = Create("TextLabel", {
        Name = "ValueLabel",
        Size = UDim2.new(0.25, 0, 1, 0),
        Position = UDim2.new(0.75, 0, 0, 0),
        BackgroundTransparency = 1,
        Text = tostring(slider.Default),
        TextColor3 = self.Theme.Primary,
        TextSize = 14,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Right,
        Parent = SliderHeader
    })
    
    local SliderContainer = Create("Frame", {
        Name = "SliderContainer",
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 35),
        BackgroundTransparency = 1,
        Parent = SliderFrame
    })
    
    local Track = Create("Frame", {
        Name = "Track",
        Size = UDim2.new(1, 0, 0, 8),
        Position = UDim2.new(0, 0, 0.5, -4),
        BackgroundColor3 = self.Theme.Surface,
        BackgroundTransparency = 0.5,
        BorderSizePixel = 0,
        Parent = SliderContainer
    })
    
    Create("UICorner", {CornerRadius = UDim.new(1, 0), Parent = Track})
    ApplyGlassEffect(Track)
    
    local Fill = Create("Frame", {
        Name = "Fill",
        Size = UDim2.new((slider.Default - slider.Min) / (slider.Max - slider.Min), 0, 1, 0),
        BackgroundColor3 = self.Theme.Primary,
        BorderSizePixel = 0,
        Parent = Track
    })
    
    Create("UICorner", {CornerRadius = UDim.new(1, 0), Parent = Fill})
    
    local FillGradient = Create("UIGradient", {
        Parent = Fill,
        Rotation = 90,
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, self.Theme.Primary),
            ColorSequenceKeypoint.new(0.5, self.Theme.Accent),
            ColorSequenceKeypoint.new(1, self.Theme.Secondary)
        })
    })
    
    local SliderButton = Create("TextButton", {
        Name = "SliderButton",
        Size = UDim2.new(0, 20, 0, 20),
        Position = UDim2.new(Fill.Size.X.Scale, -10, 0.5, -10),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        Text = "",
        Parent = Track
    })
    
    Create("UICorner", {CornerRadius = UDim.new(1, 0), Parent = SliderButton})
    
    local ButtonGlow = Create("UIStroke", {
        Parent = SliderButton,
        Color = self.Theme.Primary,
        Thickness = 2,
        Transparency = 0.3
    })
    
    local ButtonGlowGradient = Create("UIGradient", {
        Parent = ButtonGlow,
        Rotation = 90,
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, self.Theme.Primary),
            ColorSequenceKeypoint.new(1, self.Theme.Secondary)
        })
    })
    
    local isSliding = false
    
    local function UpdateSlider(value)
        local percentage = (value - slider.Min) / (slider.Max - slider.Min)
        percentage = math.clamp(percentage, 0, 1)
        
        Tween(Fill, {Size = UDim2.new(percentage, 0, 1, 0)}, 0.1)
        Tween(SliderButton, {Position = UDim2.new(percentage, -10, 0.5, -10)}, 0.1)
        
        local displayValue = slider.Precision > 0 and string.format("%."..slider.Precision.."f", value) or tostring(math.floor(value))
        ValueLabel.Text = displayValue
        slider.Callback(value)
    end
    
    SliderButton.MouseButton1Down:Connect(function()
        isSliding = true
        Tween(SliderButton, {Size = UDim2.new(0, 24, 0, 24)}, 0.1)
        Tween(ButtonGlow, {Thickness = 3}, 0.1)
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isSliding = false
            Tween(SliderButton, {Size = UDim2.new(0, 20, 0, 20)}, 0.1)
            Tween(ButtonGlow, {Thickness = 2}, 0.1)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if isSliding and input.UserInputType == Enum.UserInputType.MouseMovement then
            local relativeX = (input.Position.X - Track.AbsolutePosition.X) / Track.AbsoluteSize.X
            relativeX = math.clamp(relativeX, 0, 1)
            local value = slider.Min + (relativeX * (slider.Max - slider.Min))
            
            if slider.Precision > 0 then
                value = math.floor(value * (10 ^ slider.Precision)) / (10 ^ slider.Precision)
            else
                value = math.floor(value)
            end
            
            UpdateSlider(value)
        end
    end)
    
    Track.MouseButton1Down:Connect(function(x, y)
        local relativeX = (x - Track.AbsolutePosition.X) / Track.AbsoluteSize.X
        relativeX = math.clamp(relativeX, 0, 1)
        local value = slider.Min + (relativeX * (slider.Max - slider.Min))
        
        if slider.Precision > 0 then
            value = math.floor(value * (10 ^ slider.Precision)) / (10 ^ slider.Precision)
        else
            value = math.floor(value)
        end
        
        UpdateSlider(value)
    end)
    
    UpdateSlider(slider.Default)
    
    return {
        SetValue = function(value)
            UpdateSlider(math.clamp(value, slider.Min, slider.Max))
        end,
        GetValue = function()
            return tonumber(ValueLabel.Text)
        end
    }
end

function TigasLib:CreateButton(options)
    local button = {
        Name = options.Name or "Button",
        Callback = options.Callback or function() end,
        Parent = options.Parent or self.Content
    }
    
    local ButtonFrame = Create("Frame", {
        Name = "ButtonFrame",
        Size = UDim2.new(1, 0, 0, 45),
        BackgroundColor3 = self.Theme.Card,
        BackgroundTransparency = 0.2,
        BorderSizePixel = 0,
        Parent = button.Parent
    })
    
    Create("UICorner", {CornerRadius = UDim.new(0, 10), Parent = ButtonFrame})
    ApplyGlassEffect(ButtonFrame, 0.6)
    
    local Button = Create("TextButton", {
        Name = "Button",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = "",
        Parent = ButtonFrame
    })
    
    local ButtonLabel = Create("TextLabel", {
        Name = "ButtonLabel",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = button.Name,
        TextColor3 = self.Theme.Text,
        TextSize = 14,
        Font = Enum.Font.GothamSemibold,
        Parent = ButtonFrame
    })
    
    local function CreateRippleEffect(button)
        local Ripple = Create("Frame", {
            Name = "Ripple",
            Size = UDim2.new(0, 0, 0, 0),
            Position = UDim2.new(0.5, 0, 0.5, 0),
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            BackgroundTransparency = 0.8,
            Parent = button
        })
        
        Create("UICorner", {CornerRadius = UDim.new(1, 0), Parent = Ripple})
        
        Tween(Ripple, {Size = UDim2.new(2, 0, 2, 0), BackgroundTransparency = 1}, 0.6)
        delay(0.6, function()
            Ripple:Destroy()
        end)
    end
    
    Button.MouseEnter:Connect(function()
        Tween(ButtonFrame, {BackgroundColor3 = self.Theme.Surface, BackgroundTransparency = 0.1}, 0.2)
        Tween(ButtonLabel, {TextColor3 = self.Theme.Primary}, 0.2)
    end)
    
    Button.MouseLeave:Connect(function()
        Tween(ButtonFrame, {BackgroundColor3 = self.Theme.Card, BackgroundTransparency = 0.2}, 0.2)
        Tween(ButtonLabel, {TextColor3 = self.Theme.Text}, 0.2)
    end)
    
    Button.MouseButton1Click:Connect(function()
        CreateRippleEffect(ButtonFrame)
        
        Tween(ButtonFrame, {Size = UDim2.new(0.98, 0, 0, 43)}, 0.1)
        Tween(ButtonFrame, {Size = UDim2.new(1, 0, 0, 45)}, 0.1)
        
        button.Callback()
    end)
    
    return {
        Frame = ButtonFrame,
        SetText = function(text)
            ButtonLabel.Text = text
        end
    }
end

function TigasLib:CreateToggle(options)
    local toggle = {
        Name = options.Name or "Toggle",
        Default = options.Default or false,
        Callback = options.Callback or function() end,
        Parent = options.Parent or self.Content
    }
    
    local ToggleFrame = Create("Frame", {
        Name = "ToggleFrame",
        Size = UDim2.new(1, 0, 0, 35),
        BackgroundColor3 = self.Theme.Card,
        BackgroundTransparency = 0.2,
        BorderSizePixel = 0,
        Parent = toggle.Parent
    })
    
    Create("UICorner", {CornerRadius = UDim.new(0, 8), Parent = ToggleFrame})
    ApplyGlassEffect(ToggleFrame, 0.6)
    
    local ToggleLabel = Create("TextLabel", {
        Name = "ToggleLabel",
        Size = UDim2.new(0.7, 0, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = toggle.Name,
        TextColor3 = self.Theme.Text,
        TextSize = 14,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = ToggleFrame
    })
    
    local ToggleContainer = Create("Frame", {
        Name = "ToggleContainer",
        Size = UDim2.new(0, 50, 0, 25),
        Position = UDim2.new(0.9, -50, 0.5, -12.5),
        BackgroundTransparency = 1,
        Parent = ToggleFrame
    })
    
    local ToggleBackground = Create("Frame", {
        Name = "ToggleBackground",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundColor3 = self.Theme.Surface,
        BackgroundTransparency = 0.3,
        BorderSizePixel = 0,
        Parent = ToggleContainer
    })
    
    Create("UICorner", {CornerRadius = UDim.new(1, 0), Parent = ToggleBackground})
    ApplyGlassEffect(ToggleBackground)
    
    local ToggleButton = Create("Frame", {
        Name = "ToggleButton",
        Size = UDim2.new(0, 19, 0, 19),
        Position = UDim2.new(0, 3, 0.5, -9.5),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BorderSizePixel = 0,
        Parent = ToggleBackground
    })
    
    Create("UICorner", {CornerRadius = UDim.new(1, 0), Parent = ToggleButton})
    
    local ButtonGlow = Create("UIStroke", {
        Parent = ToggleButton,
        Color = self.Theme.Primary,
        Thickness = 2,
        Transparency = 0.5
    })
    
    local isToggled = toggle.Default
    
    local function UpdateToggle()
        if isToggled then
            Tween(ToggleButton, {Position = UDim2.new(1, -22, 0.5, -9.5)}, 0.2, Enum.EasingStyle.Back)
            Tween(ToggleBackground, {BackgroundColor3 = self.Theme.Primary}, 0.2)
            Tween(ButtonGlow, {Color = self.Theme.Success}, 0.2)
            Tween(ToggleLabel, {TextColor3 = self.Theme.Success}, 0.2)
        else
            Tween(ToggleButton, {Position = UDim2.new(0, 3, 0.5, -9.5)}, 0.2, Enum.EasingStyle.Back)
            Tween(ToggleBackground, {BackgroundColor3 = self.Theme.Surface}, 0.2)
            Tween(ButtonGlow, {Color = self.Theme.Primary}, 0.2)
            Tween(ToggleLabel, {TextColor3 = self.Theme.Text}, 0.2)
        end
        toggle.Callback(isToggled)
    end
    
    ToggleBackground.MouseButton1Click:Connect(function()
        isToggled = not isToggled
        UpdateToggle()
    end)
    
    UpdateToggle()
    
    return {
        SetValue = function(value)
            isToggled = value
            UpdateToggle()
        end,
        GetValue = function()
            return isToggled
        end
    }
end

function TigasLib:CreateLabel(options)
    local label = {
        Text = options.Text or "Label",
        Parent = options.Parent or self.Content
    }
    
    local LabelFrame = Create("Frame", {
        Name = "LabelFrame",
        Size = UDim2.new(1, 0, 0, 25),
        BackgroundTransparency = 1,
        Parent = label.Parent
    })
    
    local Label = Create("TextLabel", {
        Name = "Label",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = label.Text,
        TextColor3 = self.Theme.SubText,
        TextSize = 13,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = LabelFrame
    })
    
    return {
        SetText = function(text)
            Label.Text = text
        end
    }
end

return TigasLib
