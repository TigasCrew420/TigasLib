local TigasUI = {}
TigasUI.__index = TigasUI

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()

local Theme = {
    Primary   = Color3.fromRGB(0, 247, 255),
    Secondary = Color3.fromRGB(148, 0, 255),
    Background= Color3.fromRGB(15, 15, 25),
    Card      = Color3.fromRGB(25, 25, 40),
    Surface   = Color3.fromRGB(35, 35, 55),
    Text      = Color3.fromRGB(255, 255, 255),
    SubText   = Color3.fromRGB(180, 180, 220),
    Success   = Color3.fromRGB(0, 255, 162),
    Warning   = Color3.fromRGB(255, 230, 0),
    Error     = Color3.fromRGB(255, 50, 100)
}

local function Create(class, properties)
    local instance = Instance.new(class)
    for property, value in pairs(properties) do
        instance[property] = value
    end
    return instance
end

local function Tween(object, properties, duration, style)
    local tweenInfo = TweenInfo.new(duration or 0.3, style or Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
    local tween = TweenService:Create(object, tweenInfo, properties)
    tween:Play()
    return tween
end

local function ApplyGlassEffect(frame)
    local stroke = Create("UIStroke", {
        Parent = frame,
        Color = Color3.fromRGB(255, 255, 255),
        Transparency = 0.9,
        Thickness = 1
    })

    local gradient = Create("UIGradient", {
        Parent = stroke,
        Rotation = 45,
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Theme.Primary),
            ColorSequenceKeypoint.new(1, Theme.Secondary)
        })
    })

    return stroke, gradient
end

function TigasUI:CreateWindow(options)
    options = options or {}
    local window = {
        Name         = options.Name or "TigasUI",
        Theme        = options.Theme or Theme,
        Size         = options.Size or UDim2.new(0, 550, 0, 450),
        Position     = options.Position or UDim2.new(0.5, -275, 0.5, -225),
        Transparency = options.Transparency or 0.1
    }

    local screenGui = Create("ScreenGui", {
        Name = "TigasUI",
        DisplayOrder = 10,
        ResetOnSpawn = false,
        Parent = Player:WaitForChild("PlayerGui")
    })

    local main = Create("Frame", {
        Name = "MainContainer",
        Size = window.Size,
        Position = window.Position,
        BackgroundColor3 = window.Theme.Background,
        BackgroundTransparency = window.Transparency,
        BorderSizePixel = 0,
        Parent = screenGui
    })

    ApplyGlassEffect(main)

    Create("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = main
    })

    local topBar = Create("Frame", {
        Name = "TopBar",
        Size = UDim2.new(1, 0, 0, 45),
        BackgroundColor3 = window.Theme.Surface,
        BackgroundTransparency = 0.3,
        BorderSizePixel = 0,
        Parent = main
    })

    Create("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = topBar
    })

    Create("UIGradient", {
        Parent = topBar,
        Rotation = 90,
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Theme.Primary),
            ColorSequenceKeypoint.new(0.5, Theme.Secondary),
            ColorSequenceKeypoint.new(1, Theme.Primary)
        }),
        Transparency = NumberSequence.new({
            NumberSequenceKeypoint.new(0, 0.8),
            NumberSequenceKeypoint.new(1, 0.9)
        })
    })

    local title = Create("TextLabel", {
        Name = "Title",
        Size = UDim2.new(0.7, 0, 1, 0),
        Position = UDim2.new(0.05, 0, 0, 0),
        BackgroundTransparency = 1,
        Text = window.Name,
        TextColor3 = window.Theme.Text,
        TextSize = 18,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = topBar
    })

    local closeBtn = Create("TextButton", {
        Name = "CloseButton",
        Size = UDim2.new(0, 30, 0, 30),
        Position = UDim2.new(0.92, 0, 0.5, -15),
        BackgroundColor3 = Color3.fromRGB(255, 50, 50),
        BackgroundTransparency = 0.3,
        Text = "Ã—",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 20,
        Font = Enum.Font.GothamBold,
        Parent = topBar
    })

    Create("UICorner", { CornerRadius = UDim.new(1, 0), Parent = closeBtn })

    local content = Create("ScrollingFrame", {
        Name = "Content",
        Size = UDim2.new(1, -20, 1, -65),
        Position = UDim2.new(0, 10, 0, 55),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        ScrollBarThickness = 3,
        ScrollBarImageColor3 = Theme.Primary,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        Parent = main
    })

    local contentLayout = Create("UIListLayout", {
        Parent = content,
        Padding = UDim.new(0, 10)
    })

    -- drag to move window
    local dragging = false
    local dragInput, dragStart, startPos

    topBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = main.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    topBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            main.Position = UDim2.new(
                startPos.X.Scale, startPos.X.Offset + delta.X,
                startPos.Y.Scale, startPos.Y.Offset + delta.Y
            )
        end
    end)

    -- close button
    closeBtn.MouseButton1Click:Connect(function()
        Tween(main, { Size = UDim2.new(0, 0, 0, 0) }, 0.3)
        task.wait(0.3)
        screenGui:Destroy()
    end)

    -- hover micro-feedback
    closeBtn.MouseEnter:Connect(function()
        Tween(closeBtn, { BackgroundTransparency = 0 }, 0.2)
    end)

    closeBtn.MouseLeave:Connect(function()
        Tween(closeBtn, { BackgroundTransparency = 0.3 }, 0.2)
    end)

    -- auto expand scrolling area
    contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        content.CanvasSize = UDim2.new(0, 0, 0, contentLayout.AbsoluteContentSize.Y + 10)
    end)

    local windowTable = {
        ScreenGui     = screenGui,
        MainContainer = main,
        Content       = content,
        Theme         = window.Theme
    }

    setmetatable(windowTable, TigasUI)
    return windowTable
end

-- section container
function TigasUI:CreateSection(options)
    local section = {
        Name = options.Name or "Section",
        Parent = options.Parent or self.Content
    }

    local frame = Create("Frame", {
        Name = "SectionFrame",
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundColor3 = self.Theme.Card,
        BackgroundTransparency = 0.2,
        BorderSizePixel = 0,
        Parent = section.Parent
    })

    Create("UICorner", { CornerRadius = UDim.new(0, 8), Parent = frame })
    ApplyGlassEffect(frame)

    local title = Create("TextLabel", {
        Name = "SectionTitle",
        Size = UDim2.new(1, -20, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = section.Name,
        TextColor3 = self.Theme.Text,
        TextSize = 16,
        Font = Enum.Font.GothamSemibold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = frame
    })

    local content = Create("Frame", {
        Name = "SectionContent",
        Size = UDim2.new(1, -20, 0, 0),
        Position = UDim2.new(0, 10, 0, 45),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Parent = frame
    })

    local list = Create("UIListLayout", {
        Parent = content,
        Padding = UDim.new(0, 8)
    })

    list:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        content.Size = UDim2.new(1, -20, 0, list.AbsoluteContentSize.Y)
        frame.Size = UDim2.new(1, 0, 0, list.AbsoluteContentSize.Y + 50)
    end)

    return { Frame = frame, Content = content }
end

-- slider
function TigasUI:CreateSlider(options)
    local slider = {
        Name     = options.Name or "Slider",
        Min      = options.Min or 0,
        Max      = options.Max or 100,
        Default  = options.Default or options.Min or 0,
        Callback = options.Callback or function() end,
        Parent   = options.Parent or self.Content
    }

    local frame = Create("Frame", {
        Name = "SliderFrame",
        Size = UDim2.new(1, 0, 0, 60),
        BackgroundColor3 = self.Theme.Card,
        BackgroundTransparency = 0.3,
        BorderSizePixel = 0,
        Parent = slider.Parent
    })

    Create("UICorner", { CornerRadius = UDim.new(0, 8), Parent = frame })
    ApplyGlassEffect(frame)

    local label = Create("TextLabel", {
        Name = "SliderTitle",
        Size = UDim2.new(1, -20, 0, 20),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = slider.Name,
        TextColor3 = self.Theme.Text,
        TextSize = 14,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = frame
    })

    local valueLabel = Create("TextLabel", {
        Name = "ValueLabel",
        Size = UDim2.new(0, 60, 0, 20),
        Position = UDim2.new(1, -70, 0, 5),
        BackgroundTransparency = 1,
        Text = tostring(slider.Default),
        TextColor3 = self.Theme.Primary,
        TextSize = 14,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Right,
        Parent = frame
    })

    local track = Create("Frame", {
        Name = "Track",
        Size = UDim2.new(1, -20, 0, 6),
        Position = UDim2.new(0, 10, 0, 35),
        BackgroundColor3 = self.Theme.Surface,
        BorderSizePixel = 0,
        Parent = frame
    })

    Create("UICorner", { CornerRadius = UDim.new(1, 0), Parent = track })

    local fill = Create("Frame", {
        Name = "Fill",
        Size = UDim2.new((slider.Default - slider.Min) / (slider.Max - slider.Min), 0, 1, 0),
        BackgroundColor3 = self.Theme.Primary,
        BorderSizePixel = 0,
        Parent = track
    })

    Create("UICorner", { CornerRadius = UDim.new(1, 0), Parent = fill })

    Create("UIGradient", {
        Parent = fill,
        Rotation = 90,
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, self.Theme.Primary),
            ColorSequenceKeypoint.new(1, self.Theme.Secondary)
        })
    })

    local knob = Create("TextButton", {
        Name = "SliderButton",
        Size = UDim2.new(0, 20, 0, 20),
        Position = UDim2.new(fill.Size.X.Scale, -10, 0.5, -10),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        Text = "",
        Parent = track
    })

    Create("UICorner", { CornerRadius = UDim.new(1, 0), Parent = knob })

    Create("UIStroke", {
        Parent = knob,
        Color = self.Theme.Primary,
        Thickness = 2,
        Transparency = 0.5
    })

    local isSliding = false

    local function UpdateSlider(value)
        local pct = (value - slider.Min) / (slider.Max - slider.Min)
        pct = math.clamp(pct, 0, 1)

        Tween(fill, { Size = UDim2.new(pct, 0, 1, 0) }, 0.1)
        Tween(knob, { Position = UDim2.new(pct, -10, 0.5, -10) }, 0.1)

        valueLabel.Text = tostring(math.floor(value))
        slider.Callback(value)
    end

    knob.MouseButton1Down:Connect(function()
        isSliding = true
        Tween(knob, { Size = UDim2.new(0, 24, 0, 24) }, 0.1)
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isSliding = false
            Tween(knob, { Size = UDim2.new(0, 20, 0, 20) }, 0.1)
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if isSliding and input.UserInputType == Enum.UserInputType.MouseMovement then
            local rx = (input.Position.X - track.AbsolutePosition.X) / track.AbsoluteSize.X
            rx = math.clamp(rx, 0, 1)
            local value = slider.Min + (rx * (slider.Max - slider.Min))
            value = math.floor(value)
            UpdateSlider(value)
        end
    end)

    UpdateSlider(slider.Default)

    return {
        SetValue = function(value)
            UpdateSlider(math.clamp(value, slider.Min, slider.Max))
        end,
        GetValue = function()
            return tonumber(valueLabel.Text)
        end
    }
end

-- button
function TigasUI:CreateButton(options)
    local button = {
        Name     = options.Name or "Button",
        Callback = options.Callback or function() end,
        Parent   = options.Parent or self.Content
    }

    local frame = Create("Frame", {
        Name = "ButtonFrame",
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundColor3 = self.Theme.Card,
        BackgroundTransparency = 0.3,
        BorderSizePixel = 0,
        Parent = button.Parent
    })

    Create("UICorner", { CornerRadius = UDim.new(0, 8), Parent = frame })
    ApplyGlassEffect(frame)

    local clickArea = Create("TextButton", {
        Name = "Button",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = "",
        Parent = frame
    })

    local label = Create("TextLabel", {
        Name = "ButtonLabel",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = button.Name,
        TextColor3 = self.Theme.Text,
        TextSize = 14,
        Font = Enum.Font.GothamSemibold,
        Parent = frame
    })

    clickArea.MouseEnter:Connect(function()
        Tween(frame, { BackgroundColor3 = self.Theme.Surface }, 0.2)
        Tween(label, { TextColor3 = self.Theme.Primary }, 0.2)
    end)

    clickArea.MouseLeave:Connect(function()
        Tween(frame, { BackgroundColor3 = self.Theme.Card }, 0.2)
        Tween(label, { TextColor3 = self.Theme.Text }, 0.2)
    end)

    clickArea.MouseButton1Click:Connect(function()
        Tween(frame, { Size = UDim2.new(0.95, 0, 0, 38) }, 0.1)
        Tween(frame, { Size = UDim2.new(1, 0, 0, 40) }, 0.1)
        button.Callback()
    end)

    return frame
end

-- toggle
function TigasUI:CreateToggle(options)
    local toggle = {
        Name     = options.Name or "Toggle",
        Default  = options.Default or false,
        Callback = options.Callback or function() end,
        Parent   = options.Parent or self.Content
    }

    local frame = Create("Frame", {
        Name = "ToggleFrame",
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundColor3 = self.Theme.Card,
        BackgroundTransparency = 0.3,
        BorderSizePixel = 0,
        Parent = toggle.Parent
    })

    Create("UICorner", { CornerRadius = UDim.new(0, 8), Parent = frame })
    ApplyGlassEffect(frame)

    local label = Create("TextLabel", {
        Name = "ToggleLabel",
        Size = UDim2.new(0.7, 0, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = toggle.Name,
        TextColor3 = self.Theme.Text,
        TextSize = 14,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = frame
    })

    local bg = Create("Frame", {
        Name = "ToggleBackground",
        Size = UDim2.new(0, 40, 0, 20),
        Position = UDim2.new(0.9, -40, 0.5, -10),
        BackgroundColor3 = self.Theme.Surface,
        BorderSizePixel = 0,
        Parent = frame
    })

    Create("UICorner", { CornerRadius = UDim.new(1, 0), Parent = bg })

    local knob = Create("Frame", {
        Name = "ToggleButton",
        Size = UDim2.new(0, 16, 0, 16),
        Position = UDim2.new(0, 2, 0.5, -8),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BorderSizePixel = 0,
        Parent = bg
    })

    Create("UICorner", { CornerRadius = UDim.new(1, 0), Parent = knob })

    local isOn = toggle.Default

    local function UpdateToggle()
        if isOn then
            Tween(knob, { Position = UDim2.new(1, -18, 0.5, -8) }, 0.2)
            Tween(bg, { BackgroundColor3 = self.Theme.Primary }, 0.2)
        else
            Tween(knob, { Position = UDim2.new(0, 2, 0.5, -8) }, 0.2)
            Tween(bg, { BackgroundColor3 = self.Theme.Surface }, 0.2)
        end
        toggle.Callback(isOn)
    end

    bg.MouseButton1Click:Connect(function()
        isOn = not isOn
        UpdateToggle()
    end)

    UpdateToggle()

    return {
        SetValue = function(v)
            isOn = v
            UpdateToggle()
        end,
        GetValue = function()
            return isOn
        end
    }
end

return TigasUI
