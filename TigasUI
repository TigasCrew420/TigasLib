local TigasUI = {}
TigasUI.__index = TigasUI

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Player = Players.LocalPlayer

local Theme = {
	Primary   = Color3.fromRGB(0,247,255),
	Secondary = Color3.fromRGB(148,0,255),
	Accent    = Color3.fromRGB(255,0,140),
	Background= Color3.fromRGB(10,10,20),
	Card      = Color3.fromRGB(20,20,35),
	Surface   = Color3.fromRGB(30,30,50),
	Text      = Color3.fromRGB(255,255,255),
	SubText   = Color3.fromRGB(180,180,220),
	Success   = Color3.fromRGB(0,255,162),
	Warning   = Color3.fromRGB(255,230,0),
	Error     = Color3.fromRGB(255,50,100)
}

local function Create(class, props)
	local o = Instance.new(class)
	for k,v in pairs(props) do o[k] = v end
	return o
end

local function Tween(obj, props, t, style)
	local info = TweenInfo.new(t or 0.35, style or Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
	local tw = TweenService:Create(obj, info, props); tw:Play(); return tw
end

local function Glass(frame, theme, intensity)
	intensity = intensity or 0.9
	local stroke = Create("UIStroke", {
		Parent = frame,
		Color = Color3.fromRGB(255,255,255),
		Transparency = intensity,
		Thickness = 1.5,
		ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	})
	Create("UIGradient", {
		Parent = stroke,
		Rotation = 45,
		Color = ColorSequence.new({
			ColorSequenceKeypoint.new(0, theme.Primary),
			ColorSequenceKeypoint.new(0.5, theme.Accent),
			ColorSequenceKeypoint.new(1, theme.Secondary)
		})
	})
	return stroke
end

local function Pulse(frame, theme)
	local glow = Create("UIStroke", {Parent = frame, Color = theme.Primary, Thickness = 2, Transparency = 0.8})
	Create("UIGradient", {
		Parent = glow, Rotation = 90,
		Color = ColorSequence.new({
			ColorSequenceKeypoint.new(0, theme.Primary),
			ColorSequenceKeypoint.new(1, theme.Secondary)
		})
	})
	task.spawn(function()
		while frame.Parent do
			Tween(glow, {Thickness = 3, Transparency = 0.6}, 1, Enum.EasingStyle.Sine); task.wait(1)
			Tween(glow, {Thickness = 2, Transparency = 0.8}, 1, Enum.EasingStyle.Sine); task.wait(1)
		end
	end)
end

function TigasUI:CreateWindow(opts)
	opts = opts or {}
	local theme = opts.Theme or Theme

	local screen = Create("ScreenGui", {
		Name = "TigasUI",
		DisplayOrder = 10,
		IgnoreGuiInset = true,
		ResetOnSpawn = false,
		Parent = Player:WaitForChild("PlayerGui")
	})

	if opts.AcrylicBlur ~= false then
		Create("BlurEffect", {Name = "BackgroundBlur", Size = 10, Parent = screen})
	end

	local overlay = Create("Frame", {
		Parent = screen,
		BackgroundColor3 = Color3.fromRGB(0,0,0),
		BackgroundTransparency = 1,
		Size = UDim2.new(1,0,1,0)
	})
	local splash = Create("TextLabel", {
		Parent = overlay,
		AnchorPoint = Vector2.new(0.5,0.5),
		Position = UDim2.new(0.5,0,0.5,0),
		Size = UDim2.new(0,0,0,0),
		BackgroundTransparency = 1,
		Text = tostring(opts.SplashText or "TigasUI"),
		TextColor3 = theme.Primary,
		TextTransparency = 1,
		TextSize = 42,
		Font = Enum.Font.GothamBlack
	})

	local main = Create("Frame", {
		Name = "Main",
		Size = UDim2.new(0, math.max(300, (opts.Size and opts.Size.X.Offset) or 600), 0, math.max(160, (opts.Size and opts.Size.Y.Offset) or 500)),
		Position = opts.Position or UDim2.new(0.5, -((opts.Size and opts.Size.X.Offset) or 600)/2, 0.5, -((opts.Size and opts.Size.Y.Offset) or 500)/2),
		BackgroundColor3 = theme.Background,
		BackgroundTransparency = opts.Transparency or 0.05,
		BorderSizePixel = 0,
		ClipsDescendants = true,
		Parent = screen
	})
	Create("UICorner", {Parent = main, CornerRadius = UDim.new(0,16)})
	Glass(main, theme, 0.8)
	Pulse(main, theme)

	local bg = Create("Frame", {Parent = main, Size = UDim2.new(1,0,1,0), BackgroundTransparency = 1})
	local bgGrad = Create("UIGradient", {
		Parent = bg, Rotation = 0,
		Color = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(10,10,30)),
			ColorSequenceKeypoint.new(0.5, Color3.fromRGB(15,15,40)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(10,10,30))
		}),
		Transparency = NumberSequence.new({
			NumberSequenceKeypoint.new(0, 0.82),
			NumberSequenceKeypoint.new(1, 0.92)
		})
	})
	task.spawn(function()
		while bg.Parent do
			for i = 0, 360, 2 do
				bgGrad.Rotation = i
				RunService.RenderStepped:Wait()
			end
		end
	end)

	local top = Create("Frame", {
		Parent = main, Name = "TopBar",
		Size = UDim2.new(1,0,0,50),
		BackgroundColor3 = theme.Surface,
		BackgroundTransparency = 0.4,
		BorderSizePixel = 0
	})
	Create("UICorner", {Parent = top, CornerRadius = UDim.new(0,16)})
	Glass(top, theme, 0.7)
	Create("UIGradient", {
		Parent = top, Rotation = 90,
		Color = ColorSequence.new({
			ColorSequenceKeypoint.new(0, theme.Primary),
			ColorSequenceKeypoint.new(0.3, theme.Accent),
			ColorSequenceKeypoint.new(0.7, theme.Secondary),
			ColorSequenceKeypoint.new(1, theme.Primary)
		}),
		Transparency = NumberSequence.new({
			NumberSequenceKeypoint.new(0, 0.72),
			NumberSequenceKeypoint.new(1, 0.92)
		})
	})

	local titleWrap = Create("Frame", {Parent = top, Size = UDim2.new(0.7,0,1,0), Position = UDim2.new(0,15,0,0), BackgroundTransparency = 1})
	local title = Create("TextLabel", {
		Parent = titleWrap, Name = "Title",
		Size = UDim2.new(1,0,0.6,0), Position = UDim2.new(0,0,0.2,0),
		BackgroundTransparency = 1, Text = tostring(opts.Name or "TigasUI"),
		TextColor3 = theme.Text, TextSize = 20, Font = Enum.Font.GothamBold, TextXAlignment = Enum.TextXAlignment.Left
	})
	Create("TextLabel", {
		Parent = titleWrap, Name = "Subtitle",
		Size = UDim2.new(1,0,0.4,0), Position = UDim2.new(0,0,0.6,0),
		BackgroundTransparency = 1, Text = "Futuristic UI",
		TextColor3 = theme.SubText, TextSize = 12, Font = Enum.Font.Gotham, TextXAlignment = Enum.TextXAlignment.Left
	})

	local controls = Create("Frame", {Parent = top, Size = UDim2.new(0.2,0,1,0), Position = UDim2.new(0.8,0,0,0), BackgroundTransparency = 1})
	local minBtn = Create("TextButton", {
		Parent = controls, Name="Minimize", Size=UDim2.new(0,30,0,30), Position=UDim2.new(0.2,0,0.5,-15),
		BackgroundColor3 = theme.Warning, BackgroundTransparency = 0.3, Text = "_",
		TextColor3 = Color3.new(1,1,1), TextSize = 16, Font = Enum.Font.GothamBold
	})
	local closeBtn = Create("TextButton", {
		Parent = controls, Name="Close", Size=UDim2.new(0,30,0,30), Position=UDim2.new(0.6,0,0.5,-15),
		BackgroundColor3 = theme.Error, BackgroundTransparency = 0.3, Text = "Ã—",
		TextColor3 = Color3.new(1,1,1), TextSize = 20, Font = Enum.Font.GothamBold
	})
	Create("UICorner", {Parent=minBtn, CornerRadius=UDim.new(1,0)})
	Create("UICorner", {Parent=closeBtn, CornerRadius=UDim.new(1,0)})
	Glass(minBtn, theme); Glass(closeBtn, theme)

	local content = Create("ScrollingFrame", {
		Parent = main, Name = "Content",
		Size = UDim2.new(1,-20,1,-70), Position = UDim2.new(0,10,0,60),
		BackgroundTransparency = 1, ScrollBarThickness = 4,
		ScrollBarImageColor3 = theme.Primary, ScrollBarImageTransparency = 0.7,
		CanvasSize = UDim2.new(0,0,0,0)
	})
	local contentList = Create("UIListLayout", {Parent = content, Padding = UDim.new(0,15)})
	contentList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
		content.CanvasSize = UDim2.new(0,0,0, contentList.AbsoluteContentSize.Y + 20)
	end)

	local dragging, dragInput, dragStart, startPos
	top.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true; dragStart = input.Position; startPos = main.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then dragging = false end
			end)
		end
	end)
	top.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then dragInput = input end
	end)
	UserInputService.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			local d = input.Position - dragStart
			main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + d.X, startPos.Y.Scale, startPos.Y.Offset + d.Y)
		end
	end)

	local minimized = false
	local function hover(btn)
		btn.MouseEnter:Connect(function() Tween(btn, {BackgroundTransparency=0.1, Size=UDim2.new(0,32,0,32)}, 0.2) end)
		btn.MouseLeave:Connect(function() Tween(btn, {BackgroundTransparency=0.3, Size=UDim2.new(0,30,0,30)}, 0.2) end)
	end
	hover(minBtn); hover(closeBtn)

	closeBtn.MouseButton1Click:Connect(function()
		Tween(main, {Size=UDim2.new(0,0,0,0), Position=UDim2.new(0.5,0,0.5,0)}, 0.3)
		task.wait(0.3)
		screen:Destroy()
	end)

	minBtn.MouseButton1Click:Connect(function()
		minimized = not minimized
		if minimized then
			Tween(main, {Size = UDim2.new(0, main.Size.X.Offset, 0, 50)}, 0.3)
			content.Visible = false
		else
			Tween(main, {Size = UDim2.new(0, math.max(300, (opts.Size and opts.Size.X.Offset) or 600), 0, math.max(160, (opts.Size and opts.Size.Y.Offset) or 500))}, 0.3)
			content.Visible = true
		end
	end)

	overlay.BackgroundTransparency = 1
	splash.TextTransparency = 1
	splash.Size = UDim2.new(0, 0, 0, 0)
	Tween(overlay, {BackgroundTransparency = 0.15}, 0.15)
	Tween(splash, {TextTransparency = 0}, 0.25)
	Tween(splash, {Size = UDim2.new(0, 420, 0, 80)}, 0.35, Enum.EasingStyle.Back)
	task.wait(0.5)
	Tween(splash, {TextTransparency = 1}, 0.25)
	Tween(overlay, {BackgroundTransparency = 1}, 0.25)
	task.wait(0.25)
	overlay:Destroy()

	local startSize = UDim2.new(0, math.floor(main.Size.X.Offset*0.85), 0, math.floor(main.Size.Y.Offset*0.85))
	local startPos = UDim2.new(main.Position.X.Scale, main.Position.X.Offset, main.Position.Y.Scale, main.Position.Y.Offset+10)
	main.Size = startSize
	main.Position = startPos
	main.BackgroundTransparency = (opts.Transparency or 0.05) + 0.15
	Tween(main, {Size = UDim2.new(0, math.max(300, (opts.Size and opts.Size.X.Offset) or 600), 0, math.max(160, (opts.Size and opts.Size.Y.Offset) or 500))}, 0.35, Enum.EasingStyle.Back)
	Tween(main, {Position = opts.Position or UDim2.new(0.5, -((opts.Size and opts.Size.X.Offset) or 600)/2, 0.5, -((opts.Size and opts.Size.Y.Offset) or 500)/2)}, 0.35)
	Tween(main, {BackgroundTransparency = opts.Transparency or 0.05}, 0.35)

	local api = {
		ScreenGui = screen,
		Main = main,
		Content = content,
		Theme = theme
	}
	return setmetatable(api, TigasUI)
end

function TigasUI:CreateSection(o)
	o = o or {}
	local frame = Create("Frame", {
		Parent = o.Parent or self.Content,
		Size = UDim2.new(1,0,0,50),
		BackgroundColor3 = self.Theme.Card,
		BackgroundTransparency = 0.15
	})
	Create("UICorner", {Parent = frame, CornerRadius = UDim.new(0,12)})
	Glass(frame, self.Theme, 0.6)

	local header = Create("Frame", {Parent = frame, Size = UDim2.new(1,0,0,40), BackgroundTransparency = 1})
	local icon = Create("TextLabel", {
		Parent = header, Size=UDim2.new(0,30,0,30), Position=UDim2.new(0,10,0.5,-15),
		BackgroundTransparency=1, Text="â—ˆ", TextColor3=self.Theme.Primary, TextSize=18, Font=Enum.Font.GothamBold
	})
	Create("TextLabel", {
		Parent = header, Size=UDim2.new(1,-50,1,0), Position=UDim2.new(0,50,0,0),
		BackgroundTransparency=1, Text=tostring(o.Name or "Section"),
		TextColor3=self.Theme.Text, TextSize=16, Font=Enum.Font.GothamSemibold, TextXAlignment=Enum.TextXAlignment.Left
	})

	local content = Create("Frame", {
		Parent = frame, Name="Content",
		Size = UDim2.new(1,-20,0,0),
		Position = UDim2.new(0,10,0,45),
		BackgroundTransparency = 1
	})
	local list = Create("UIListLayout", {Parent = content, Padding = UDim.new(0,10)})
	list:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
		content.Size = UDim2.new(1,-20,0, list.AbsoluteContentSize.Y)
		frame.Size = UDim2.new(1,0,0, list.AbsoluteContentSize.Y + 55)
	end)

	header.MouseEnter:Connect(function() Tween(icon, {TextColor3=self.Theme.Accent, Rotation=180}, 0.3) end)
	header.MouseLeave:Connect(function() Tween(icon, {TextColor3=self.Theme.Primary, Rotation=0}, 0.3) end)

	return { Frame = frame, Content = content }
end

function TigasUI:CreateSlider(o)
	o = o or {}
	local min, max = o.Min or 0, o.Max or 100
	local precision = o.Precision or 0
	local default = (o.Default ~= nil) and o.Default or min
	local cb = o.Callback or function() end

	local frame = Create("Frame", {
		Parent = o.Parent or self.Content, Size = UDim2.new(1,0,0,70),
		BackgroundColor3 = self.Theme.Card, BackgroundTransparency = 0.2
	})
	Create("UICorner", {Parent = frame, CornerRadius = UDim.new(0,10)})
	Glass(frame, self.Theme, 0.7)

	local head = Create("Frame", {Parent = frame, Size = UDim2.new(1,0,0,25), BackgroundTransparency = 1})
	Create("TextLabel", {
		Parent=head, Size=UDim2.new(0.7,0,1,0), Position=UDim2.new(0,10,0,0), BackgroundTransparency=1,
		Text=tostring(o.Name or "Slider"), TextColor3=self.Theme.Text, TextSize=14, Font=Enum.Font.GothamSemibold, TextXAlignment=Enum.TextXAlignment.Left
	})
	local valueLabel = Create("TextLabel", {
		Parent=head, Size=UDim2.new(0.25,0,1,0), Position=UDim2.new(0.75,0,0,0), BackgroundTransparency=1,
		Text=tostring(default), TextColor3=self.Theme.Primary, TextSize=14, Font=Enum.Font.GothamBold, TextXAlignment=Enum.TextXAlignment.Right
	})

	local container = Create("Frame", {Parent=frame, Size=UDim2.new(1,-20,0,30), Position=UDim2.new(0,10,0,35), BackgroundTransparency=1})
	local track = Create("Frame", {
		Parent=container, Size=UDim2.new(1,0,0,8), Position=UDim2.new(0,0,0.5,-4),
		BackgroundColor3=self.Theme.Surface, BackgroundTransparency=0.5
	})
	Create("UICorner", {Parent=track, CornerRadius=UDim.new(1,0)})
	Glass(track, self.Theme)

	local fill = Create("Frame", {
		Parent=track, Size=UDim2.new((default-min)/(max-min),0,1,0),
		BackgroundColor3=self.Theme.Primary
	})
	Create("UICorner", {Parent=fill, CornerRadius=UDim.new(1,0)})
	Create("UIGradient", {
		Parent=fill, Rotation=90,
		Color=ColorSequence.new({
			ColorSequenceKeypoint.new(0, self.Theme.Primary),
			ColorSequenceKeypoint.new(0.5, self.Theme.Accent),
			ColorSequenceKeypoint.new(1, self.Theme.Secondary)
		})
	})

	local knob = Create("TextButton", {
		Parent=track, Size=UDim2.new(0,20,0,20),
		Position=UDim2.new(fill.Size.X.Scale,-10,0.5,-10),
		BackgroundColor3=Color3.fromRGB(255,255,255), Text=""
	})
	Create("UICorner", {Parent=knob, CornerRadius=UDim.new(1,0)})
	local glow = Create("UIStroke", {Parent=knob, Color=self.Theme.Primary, Thickness=2, Transparency=0.3})
	Create("UIGradient", {Parent=glow, Rotation=90, Color=ColorSequence.new({
		ColorSequenceKeypoint.new(0, self.Theme.Primary),
		ColorSequenceKeypoint.new(1, self.Theme.Secondary)
	})})

	local isSliding = false
	local function round(v) if precision>0 then local m=10^precision return math.floor(v*m)/m end return math.floor(v) end
	local function setValue(v)
		local pct = math.clamp((v - min) / (max - min), 0, 1)
		Tween(fill, {Size = UDim2.new(pct,0,1,0)}, 0.1)
		Tween(knob, {Position = UDim2.new(pct,-10,0.5,-10)}, 0.1)
		valueLabel.Text = (precision>0) and string.format("%."..precision.."f", v) or tostring(math.floor(v))
		cb(v)
	end

	knob.MouseButton1Down:Connect(function()
		isSliding = true
		Tween(knob, {Size=UDim2.new(0,24,0,24)}, 0.1)
		Tween(glow, {Thickness=3}, 0.1)
	end)
	UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			isSliding = false
			Tween(knob, {Size=UDim2.new(0,20,0,20)}, 0.1)
			Tween(glow, {Thickness=2}, 0.1)
		end
	end)
	UserInputService.InputChanged:Connect(function(input)
		if isSliding and input.UserInputType == Enum.UserInputType.MouseMovement then
			local rx = (input.Position.X - track.AbsolutePosition.X) / track.AbsoluteSize.X
			local v = round(min + math.clamp(rx,0,1) * (max - min))
			setValue(v)
		end
	end)
	track.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			local rx = (input.Position.X - track.AbsolutePosition.X) / track.AbsoluteSize.X
			local v = round(min + math.clamp(rx,0,1) * (max - min))
			setValue(v)
		end
	end)

	setValue(default)
	return {
		SetValue = function(v) setValue(math.clamp(v, min, max)) end,
		GetValue = function() return tonumber(valueLabel.Text) end
	}
end

function TigasUI:CreateButton(o)
	o = o or {}
	local cb = o.Callback or function() end
	local frame = Create("Frame", {
		Parent = o.Parent or self.Content, Size = UDim2.new(1,0,0,45),
		BackgroundColor3 = self.Theme.Card, BackgroundTransparency = 0.2
	})
	Create("UICorner", {Parent=frame, CornerRadius=UDim.new(0,10)})
	Glass(frame, self.Theme, 0.6)
	local click = Create("TextButton", {Parent=frame, Size=UDim2.new(1,0,1,0), BackgroundTransparency=1, Text=""})
	local label = Create("TextLabel", {
		Parent=frame, Size=UDim2.new(1,0,1,0), BackgroundTransparency=1,
		Text=tostring(o.Name or "Button"), TextColor3=self.Theme.Text, TextSize=14, Font=Enum.Font.GothamSemibold
	})
	local function ripple()
		local r = Create("Frame", {Parent=frame, Size=UDim2.new(0,0,0,0), Position=UDim2.new(0.5,0,0.5,0), BackgroundColor3=Color3.fromRGB(255,255,255), BackgroundTransparency=0.8})
		Create("UICorner", {Parent=r, CornerRadius=UDim.new(1,0)})
		Tween(r, {Size=UDim2.new(2,0,2,0), BackgroundTransparency=1}, 0.6); task.delay(0.6, function() r:Destroy() end)
	end
	click.MouseEnter:Connect(function()
		Tween(frame, {BackgroundColor3=self.Theme.Surface, BackgroundTransparency=0.1}, 0.2)
		Tween(label, {TextColor3=self.Theme.Primary}, 0.2)
	end)
	click.MouseLeave:Connect(function()
		Tween(frame, {BackgroundColor3=self.Theme.Card, BackgroundTransparency=0.2}, 0.2)
		Tween(label, {TextColor3=self.Theme.Text}, 0.2)
	end)
	click.MouseButton1Click:Connect(function()
		ripple()
		Tween(frame, {Size=UDim2.new(0.98,0,0,43)}, 0.08)
		Tween(frame, {Size=UDim2.new(1,0,0,45)}, 0.08)
		cb()
	end)
	return { Frame = frame, SetText = function(t) label.Text = t end }
end

function TigasUI:CreateToggle(o)
	o = o or {}
	local on = o.Default or false
	local cb = o.Callback or function() end

	local frame = Create("Frame", {
		Parent = o.Parent or self.Content, Size = UDim2.new(1,0,0,35),
		BackgroundColor3 = self.Theme.Card, BackgroundTransparency = 0.2
	})
	Create("UICorner", {Parent=frame, CornerRadius=UDim.new(0,8)})
	Glass(frame, self.Theme, 0.6)

	local label = Create("TextLabel", {
		Parent=frame, Size=UDim2.new(0.7,0,1,0), Position=UDim2.new(0,10,0,0),
		BackgroundTransparency=1, Text=tostring(o.Name or "Toggle"),
		TextColor3=self.Theme.Text, TextSize=14, Font=Enum.Font.Gotham, TextXAlignment=Enum.TextXAlignment.Left
	})

	local wrap = Create("Frame", {Parent=frame, Size=UDim2.new(0,50,0,25), Position=UDim2.new(0.9,-50,0.5,-12.5), BackgroundTransparency=1})
	local bg = Create("Frame", {Parent=wrap, Size=UDim2.new(1,0,1,0), BackgroundColor3=self.Theme.Surface, BackgroundTransparency=0.3})
	Create("UICorner", {Parent=bg, CornerRadius=UDim.new(1,0)})
	Glass(bg, self.Theme)

	local knob = Create("Frame", {Parent=bg, Size=UDim2.new(0,19,0,19), Position=UDim2.new(0,3,0.5,-9.5), BackgroundColor3=Color3.fromRGB(255,255,255)})
	Create("UICorner", {Parent=knob, CornerRadius=UDim.new(1,0)})
	local glow = Create("UIStroke", {Parent=knob, Color=self.Theme.Primary, Thickness=2, Transparency=0.5})

	local function refresh()
		if on then
			Tween(knob, {Position=UDim2.new(1,-22,0.5,-9.5)}, 0.2, Enum.EasingStyle.Back)
			Tween(bg, {BackgroundColor3=self.Theme.Primary}, 0.2)
			Tween(glow, {Color=self.Theme.Success}, 0.2)
			Tween(label, {TextColor3=self.Theme.Success}, 0.2)
		else
			Tween(knob, {Position=UDim2.new(0,3,0.5,-9.5)}, 0.2, Enum.EasingStyle.Back)
			Tween(bg, {BackgroundColor3=self.Theme.Surface}, 0.2)
			Tween(glow, {Color=self.Theme.Primary}, 0.2)
			Tween(label, {TextColor3=self.Theme.Text}, 0.2)
		end
		cb(on)
	end

	bg.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			on = not on; refresh()
		end
	end)

	refresh()
	return { SetValue=function(v) on=v; refresh() end, GetValue=function() return on end }
end

function TigasUI:CreateLabel(o)
	o = o or {}
	local frame = Create("Frame", {Parent=o.Parent or self.Content, Size=UDim2.new(1,0,0,25), BackgroundTransparency=1})
	local text = Create("TextLabel", {
		Parent=frame, Size=UDim2.new(1,0,1,0), BackgroundTransparency=1,
		Text=tostring(o.Text or "Label"), TextColor3=self.Theme.SubText,
		TextSize=13, Font=Enum.Font.Gotham, TextXAlignment=Enum.TextXAlignment.Left
	})
	return { SetText=function(t) text.Text=t end }
end

return TigasUI
